<?php
// –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
function generateOlympiadData() {
    // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞—á —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    $tasks = [];

    // 1. –ó–∞–¥–∞—á–∞ –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏ (–ú–ì–£)
    $price = rand(300, 800);
    $dividend = rand(10, 50);
    $sell_price = $price + rand(50, 200);
    $income = $sell_price + $dividend - $price;
    $yield = round(($income / $price) * 100, 2);
    $tasks[] = [
        'university' => "–ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞",
        'question' => "–ò–Ω–≤–µ—Å—Ç–æ—Ä –∫—É–ø–∏–ª –∞–∫—Ü–∏—é –ø–æ —Ü–µ–Ω–µ $price —Ä—É–±. –≤ –Ω–∞—á–∞–ª–µ –≥–æ–¥–∞. –í –∫–æ–Ω—Ü–µ –≥–æ–¥–∞ –æ–Ω –ø–æ–ª—É—á–∏–ª –¥–∏–≤–∏–¥–µ–Ω–¥ $dividend —Ä—É–±. –∏ –ø—Ä–æ–¥–∞–ª –∞–∫—Ü–∏—é –∑–∞ $sell_price —Ä—É–±. –ö–∞–∫–æ–≤–∞ –æ–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö? (–û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)",
        'answer' => number_format($yield, 2, '.', ''),
        'solution' => "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å = (($sell_price + $dividend - $price) / $price) √ó 100% = ($income/$price)*100% ‚âà $yield%"
    ];

    // 2. –ó–∞–¥–∞—á–∞ –Ω–∞ —Ü–µ–Ω—É –æ–±–ª–∏–≥–∞—Ü–∏–∏ (–í–®–≠)
    $nominal = 1000;
    $coupon_rate = rand(10, 15);
    $market_rate = $coupon_rate + rand(1, 3);
    $years = 5;
    
    $price = 0;
    for ($t = 1; $t <= $years; $t++) {
        $price += ($nominal * $coupon_rate/100) / pow(1 + $market_rate/100, $t);
    }
    $price += $nominal / pow(1 + $market_rate/100, $years);
    $price = round($price, 2);
    
    $tasks[] = [
        'university' => "–ù–ò–£ –í–®–≠",
        'question' => "–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ –≤—ã–ø—É—Å—Ç–∏–ª–æ –æ–±–ª–∏–≥–∞—Ü–∏–∏ –Ω–æ–º–∏–Ω–∞–ª–æ–º $nominal —Ä—É–±. —Å–æ —Å—Ä–æ–∫–æ–º –ø–æ–≥–∞—à–µ–Ω–∏—è $years –ª–µ—Ç –∏ –∫—É–ø–æ–Ω–æ–º $coupon_rate% –≥–æ–¥–æ–≤—ã—Ö. –ö–∞–∫–æ–≤–∞ —Ü–µ–Ω–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç $market_rate%? (–û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)",
        'answer' => number_format($price, 2, '.', ''),
        'solution' => "–¶–µ–Ω–∞ = Œ£(–ö—É–ø–æ–Ω/(1+r)^t) + –ù–æ–º–∏–Ω–∞–ª/(1+r)^n = "
                     . ($nominal * $coupon_rate/100) . "/1.$market_rate + ... + $nominal/1.$market_rate<sup>$years</sup> ‚âà $price —Ä—É–±."
    ];

    // 3. –ó–∞–¥–∞—á–∞ –Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–ü–ª–µ—Ö–∞–Ω–æ–≤)
    $share_percent = rand(30, 40);
    $bond_percent = 100 - $share_percent;
    $share_yield = rand(10, 20);
    $bond_yield = rand(5, 10);
    $portfolio_yield = round(($share_percent/100 * $share_yield) + ($bond_percent/100 * $bond_yield), 2);
    
    $tasks[] = [
        'university' => "–†–≠–£ –∏–º. –ì.–í. –ü–ª–µ—Ö–∞–Ω–æ–≤–∞",
        'question' => "–ü–æ—Ä—Ç—Ñ–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –∞–∫—Ç–∏–≤–æ–≤: $share_percent% –∞–∫—Ü–∏–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é $share_yield% –∏ $bond_percent% –æ–±–ª–∏–≥–∞—Ü–∏–π —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é $bond_yield%. –ö–∞–∫–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è? (–û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)",
        'answer' => number_format($portfolio_yield, 2, '.', ''),
        'solution' => "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è = ($share_percent% √ó $share_yield%) + ($bond_percent% √ó $bond_yield%) = "
                     . round($share_percent/100 * $share_yield, 2) . "% + " . round($bond_percent/100 * $bond_yield, 2) . "% = $portfolio_yield%"
    ];

    // 4. –ó–∞–¥–∞—á–∞ –Ω–∞ –∞–Ω–Ω—É–∏—Ç–µ—Ç (–ú–ì–ò–ú–û)
    $payment = rand(100, 200) * 1000;
    $years = rand(10, 20);
    $rate = rand(4, 8);
    
    $pv = 0;
    for ($y = 1; $y <= $years; $y++) {
        $pv += $payment / pow(1 + $rate/100, $y);
    }
    $pv = round($pv / 1000) * 1000;
    
    $tasks[] = [
        'university' => "–ú–ì–ò–ú–û",
        'question' => "–°—Ç—Ä–∞—Ö–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç: –≤—ã–ø–ª–∞—Ç–∞ " . number_format($payment, 0, ',', ' ') . " —Ä—É–±. –µ–∂–µ–≥–æ–¥–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ $years –ª–µ—Ç. –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ç–∞–∫–æ–π –∞–Ω–Ω—É–∏—Ç–µ—Ç –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è $rate%? (–û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ —Ü–µ–ª—ã—Ö —Ç—ã—Å—è—á)",
        'answer' => number_format($pv, 0, '.', ''),
        'solution' => "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–Ω—É–∏—Ç–µ—Ç–∞ = Œ£(–ü–ª–∞—Ç–µ–∂/(1+r)<sup>n</sup>) = "
                     . number_format($payment, 0, ',', ' ') . " √ó [1 - (1+$rate%)<sup>-$years</sup>]/$rate% ‚âà " . number_format($pv, 0, ',', ' ') . " —Ä—É–±."
    ];

    // 5. –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—É –ø–æ –∫—Ä–µ–¥–∏—Ç—É (–§–£)
    $loan = rand(1000, 2000) * 1000;
    $rate = rand(8, 15);
    $years = rand(2, 5);
    
    $monthly_rate = $rate / 100 / 12;
    $months = $years * 12;
    $payment = $loan * $monthly_rate / (1 - pow(1 + $monthly_rate, -$months));
    $total_payment = $payment * $months;
    $overpayment = round(($total_payment - $loan) / 1000) * 1000;
    
    $tasks[] = [
        'university' => "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç",
        'question' => "–ë–∞–Ω–∫ –≤—ã–¥–∞–ª –∫—Ä–µ–¥–∏—Ç " . number_format($loan, 0, ',', ' ') . " —Ä—É–±. –ø–æ–¥ $rate% –≥–æ–¥–æ–≤—ã—Ö –Ω–∞ $years –≥–æ–¥–∞ —Å –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏. –ö–∞–∫–æ–≤–∞ —Å—É–º–º–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã? (–û—Ç–≤–µ—Ç –æ–∫—Ä—É–≥–ª–∏—Ç–µ –¥–æ —Ü–µ–ª—ã—Ö —Ç—ã—Å—è—á)",
        'answer' => number_format($overpayment, 0, '.', ''),
        'solution' => "–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ = (–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ √ó $months) - –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ = "
                     . number_format(round($payment), 0, ',', ' ') . " √ó $months - " . number_format($loan, 0, ',', ' ') . " ‚âà " . number_format($overpayment, 0, ',', ' ') . " —Ä—É–±."
    ];

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–∞—á—É
    $randomIndex = array_rand($tasks);
    return [
        'current' => $tasks[$randomIndex]
    ];
}

$olympiadData = generateOlympiadData();
?>

<!DOCTYPE html>
<html lang="ru" data-theme="dark">
<head>
    <meta charset="UTF-8">
    <title>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&family=Roboto+Mono:wght@300;400&display=swap" rel="stylesheet">
    <style>
        :root {
            --dark-bg: #121212;
            --darker-bg: #0d0d0d;
            --card-bg: #1e1e1e;
            --accent: #6a5acd;
            --accent-hover: #5a4acd;
            --success: #4caf50;
            --error: #f44336;
            --warning: #ff9800;
            --text-primary: #f0f0f0;
            --text-secondary: #b0b0b0;
            --text-highlight: #ffffff;
            --border: #333;
            --shadow: 0 4px 20px rgba(0, 0, 0, 0.7);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: var(--dark-bg);
            color: var(--text-primary);
            font-family: 'Montserrat', sans-serif;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(40, 40, 60, 0.1) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(60, 40, 80, 0.1) 0%, transparent 20%);
        }

        .container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 2rem;
            flex: 1;
        }

        header {
            text-align: center;
            padding: 2rem 0;
            margin-bottom: 2rem;
            position: relative;
        }

        h1 {
            font-size: 2.8rem;
            font-weight: 700;
            margin-bottom: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            background: linear-gradient(90deg, #8a7cfb, #633e9c);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }

        .subtitle {
            font-size: 1.3rem;
            color: var(--text-secondary);
            max-width: 600px;
            margin: 0 auto;
            line-height: 1.6;
            font-weight: 500;
        }

        .widgets-container {
            display: grid;
            grid-template-columns: 1fr;
            gap: 2.5rem;
            margin: 2rem 0;
        }

        .widget {
            background: var(--card-bg);
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--border);
            box-shadow: var(--shadow);
            transition: transform 0.3s ease;
        }

        .widget:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
        }

        .widget-header {
            background: linear-gradient(90deg, #1a1a2e, #16213e);
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border);
        }

        .widget-title {
            font-size: 1.6rem;
            font-weight: 600;
            color: var(--text-highlight);
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .widget-title::before {
            content: "üèÜ";
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: var(--accent);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.4rem;
        }

        .widget-description {
            padding: 1.5rem 2rem;
            color: var(--text-secondary);
            font-size: 1.1rem;
            line-height: 1.6;
            border-bottom: 1px solid var(--border);
            background: rgba(30, 30, 46, 0.5);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin: 0;
            font-family: 'Roboto Mono', monospace;
        }

        th {
            background: rgba(50, 50, 70, 0.7);
            padding: 1.2rem 1.5rem;
            text-align: left;
            font-weight: 600;
            color: var(--text-highlight);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 0.95rem;
            border-bottom: 2px solid var(--accent);
        }

        td {
            padding: 1.2rem 1.5rem;
            border-bottom: 1px solid var(--border);
            text-align: left;
            font-size: 1.1rem;
        }

        tbody tr:last-child td {
            border-bottom: none;
        }

        .highlight {
            background: rgba(255, 184, 77, 0.15);
            font-weight: 700;
            color: var(--warning);
            animation: pulse 2s infinite;
            position: relative;
            border: 1px solid rgba(255, 184, 77, 0.3);
            text-align: center;
        }

        @keyframes pulse {
            0% { background-color: rgba(255, 184, 77, 0.15); }
            50% { background-color: rgba(255, 184, 77, 0.3); }
            100% { background-color: rgba(255, 184, 77, 0.15); }
        }

        .input-group {
            display: flex;
            padding: 1.5rem 2rem;
            gap: 1rem;
            background: rgba(30, 30, 46, 0.7);
            align-items: center;
            position: relative;
        }

        .answer-input {
            flex: 1;
            padding: 1rem 1.2rem;
            border-radius: 8px;
            background: var(--darker-bg);
            border: 2px solid var(--border);
            color: var(--text-primary);
            font-family: 'Roboto Mono', monospace;
            font-size: 1.2rem;
            transition: var(--transition);
        }

        .answer-input:disabled {
            background: rgba(50, 50, 50, 0.5);
            color: var(--text-secondary);
            cursor: not-allowed;
        }

        .answer-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(106, 90, 205, 0.4);
        }

        .check-btn {
            background: var(--accent);
            color: white;
            border: none;
            padding: 1rem 2.2rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.2rem;
            cursor: pointer;
            transition: var(--transition);
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
            z-index: 1;
            min-width: 180px;
            box-shadow: 0 4px 15px rgba(106, 90, 205, 0.4);
        }

        .check-btn:disabled {
            background: #555;
            cursor: not-allowed;
            box-shadow: none;
        }

        .check-btn:disabled:hover {
            transform: none;
            box-shadow: none;
        }

        .check-btn:disabled::before {
            display: none;
        }

        .check-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background: var(--accent-hover);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .check-btn:hover:not(:disabled)::before {
            width: 100%;
        }

        .check-btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(106, 90, 205, 0.6);
        }

        .result {
            padding: 1.2rem 2rem;
            font-weight: 600;
            font-size: 1.2rem;
            display: none;
            border-top: 1px solid var(--border);
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .result.success {
            background: rgba(76, 175, 80, 0.15);
            color: var(--success);
            display: block;
        }

        .result.error {
            background: rgba(244, 67, 54, 0.15);
            color: var(--error);
            display: block;
        }

        .solution {
            padding: 1.5rem 2rem;
            background: rgba(30, 30, 46, 0.7);
            display: none;
            border-top: 1px solid var(--border);
            animation: fadeIn 0.5s ease;
        }

        .solution.show {
            display: block;
        }

        .solution-title {
            font-weight: 600;
            margin-bottom: 0.8rem;
            color: var(--accent);
        }

        .solution-content {
            line-height: 1.6;
            font-family: 'Roboto Mono', monospace;
        }

        .new-task-btn {
            background: var(--accent);
            color: white;
            border: none;
            padding: 1rem 2.2rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.2rem;
            cursor: pointer;
            transition: var(--transition);
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
            z-index: 1;
            min-width: 180px;
            box-shadow: 0 4px 15px rgba(106, 90, 205, 0.4);
            margin: 1.5rem auto 0;
            display: block;
        }

        .new-task-btn:hover {
            background: var(--accent-hover);
            transform: translateY(-3px);
            box-shadow: 0 6px 20px rgba(106, 90, 205, 0.6);
        }

        .new-task-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 0;
            height: 100%;
            background: var(--accent-hover);
            transition: width 0.4s ease;
            z-index: -1;
        }

        .new-task-btn:hover::before {
            width: 100%;
        }

        .new-task-btn.hidden {
            display: none;
        }

        .attempts-counter {
            position: absolute;
            right: 20px;
            top: -10px;
            background: var(--error);
            color: white;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
            font-weight: bold;
            transform: translateY(-50%);
        }

        .question-cell {
            line-height: 1.6;
        }

        footer {
            text-align: center;
            padding: 2rem 0 1rem;
            color: var(--text-secondary);
            font-size: 1rem;
            margin-top: 3rem;
            border-top: 1px solid var(--border);
        }

        @media (max-width: 768px) {
            .container {
                padding: 1.2rem;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .widget-header, .widget-description, .input-group {
                padding: 1.2rem;
            }
            
            .input-group {
                flex-direction: column;
                align-items: stretch;
            }
            
            .check-btn {
                width: 100%;
            }
            
            th, td {
                padding: 0.8rem;
                font-size: 0.9rem;
            }
            
            .attempts-counter {
                top: -5px;
                right: 15px;
            }
            
            .new-task-btn {
                width: 100%;
                margin-top: 1.2rem;
                padding: 0.9rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>–û–ª–∏–º–ø–∏–∞–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏</h1>
            <p class="subtitle">–†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤–µ–¥—É—â–∏—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –≤—É–∑–æ–≤ –†–æ—Å—Å–∏–∏</p>
        </header>

        <main>
            <div class="widgets-container">
                <div class="widget">
                    <div class="widget-header">
                        <h2 class="widget-title">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã</h2>
                    </div>
                    <p class="widget-description">–†–µ—à–∏—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∑–∞–¥–∞—á—É. –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –ø–æ–ª–µ –Ω–∏–∂–µ. –£ –≤–∞—Å –µ—Å—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏.</p>
                    
                    <table>
                        <thead>
                            <tr>
                                <th>–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</th>
                                <th>–ó–∞–¥–∞—á–∞</th>
                                <th>–°–ª–æ–∂–Ω–æ—Å—Ç—å</th>
                                <th>–û—Ç–≤–µ—Ç</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><?= htmlspecialchars($olympiadData['current']['university']) ?></td>
                                <td class="question-cell"><?= htmlspecialchars($olympiadData['current']['question']) ?></td>
                                <td><?= rand(75, 95) ?>%</td>
                                <td class="highlight" data-answer="<?= htmlspecialchars($olympiadData['current']['answer']) ?>">?</td>
                            </tr>
                        </tbody>
                    </table>

                    <div class="input-group">
                        <input 
                            type="text" 
                            class="answer-input"
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç"
                        >
                        <button class="check-btn" data-answer="<?= htmlspecialchars($olympiadData['current']['answer']) ?>">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    </div>
                    <div class="result"></div>
                    
                    <div class="solution">
                        <div class="solution-title">–†–µ—à–µ–Ω–∏–µ:</div>
                        <div class="solution-content"><?= htmlspecialchars($olympiadData['current']['solution']) ?></div>
                    </div>
                    
                    <div style="padding: 1rem 2rem; text-align: center;">
                        <button class="new-task-btn hidden" onclick="location.reload()">üîÑ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</button>
                    </div>
                </div>
            </div>
        </main>

        <footer>
            <p>&copy; <?= date('Y') ?> –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã</p>
        </footer>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const widget = document.querySelector('.widget');
            widget.dataset.attempts = 0;
            
            const counter = document.createElement('div');
            counter.className = 'attempts-counter';
            counter.textContent = '0';
            counter.style.display = 'none';
            
            const inputGroup = widget.querySelector('.input-group');
            if (inputGroup) {
                inputGroup.appendChild(counter);
            }

            function disableWidget(correctAnswer) {
                const highlightCell = widget.querySelector('.highlight');
                if (highlightCell) {
                    highlightCell.textContent = correctAnswer;
                    highlightCell.style.backgroundColor = 'rgba(76, 175, 80, 0.2)';
                    highlightCell.style.color = 'var(--success)';
                    highlightCell.style.animation = 'none';
                    highlightCell.style.borderColor = 'rgba(76, 175, 80, 0.3)';
                }

                const input = widget.querySelector('.answer-input');
                const button = widget.querySelector('.check-btn');
                if (input) input.disabled = true;
                if (button) button.disabled = true;

                const newTaskBtn = widget.querySelector('.new-task-btn');
                if (newTaskBtn) {
                    newTaskBtn.classList.remove('hidden');
                }
                
                const solution = widget.querySelector('.solution');
                if (solution) {
                    solution.classList.add('show');
                }
            }

            document.querySelector(".check-btn").addEventListener("click", function () {
                const widget = this.closest(".widget");
                const input = widget.querySelector(".answer-input");
                const resultDiv = widget.querySelector(".result");
                const correctAnswer = this.getAttribute("data-answer");
                const counter = widget.querySelector('.attempts-counter');
                const solution = widget.querySelector('.solution');
                
                let attempts = parseInt(widget.dataset.attempts) || 0;
                attempts++;
                widget.dataset.attempts = attempts;
                
                if (counter) {
                    counter.textContent = attempts;
                    counter.style.display = 'block';
                }

                // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞: —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–∞–º–µ–Ω–∞ –∑–∞–ø—è—Ç—ã—Ö –Ω–∞ —Ç–æ—á–∫–∏
                const userAnswer = input.value.trim().replace(',', '.');
                const normalizedCorrect = correctAnswer.replace(',', '.');

                if (userAnswer === normalizedCorrect) {
                    resultDiv.textContent = "‚úÖ –í–µ—Ä–Ω–æ!";
                    resultDiv.className = "result success";
                    resultDiv.style.display = "block";
                    
                    input.disabled = true;
                    this.disabled = true;
                    
                    const newTaskBtn = widget.querySelector('.new-task-btn');
                    if (newTaskBtn) {
                        newTaskBtn.classList.remove('hidden');
                    }
                    
                    if (solution) {
                        solution.classList.add('show');
                    }

                    const highlightCell = widget.querySelector('.highlight');
                    if (highlightCell) {
                        highlightCell.textContent = correctAnswer;
                        highlightCell.style.backgroundColor = 'rgba(76, 175, 80, 0.2)';
                        highlightCell.style.color = 'var(--success)';
                        highlightCell.style.animation = 'none';
                    }
                } else {
                    if (attempts >= 3) {
                        resultDiv.textContent = `‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`;
                        resultDiv.className = "result error";
                        resultDiv.style.display = "block";
                        disableWidget(correctAnswer);
                    } else {
                        resultDiv.textContent = `‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –∏–∑ 3.`;
                        resultDiv.className = "result error";
                        resultDiv.style.display = "block";
                        
                        input.style.borderColor = "var(--error)";
                        setTimeout(() => {
                            input.style.borderColor = "var(--border)";
                        }, 1000);
                    }
                }
            });

            const firstInput = document.querySelector(".answer-input");
            if (firstInput) {
                firstInput.focus();
            }

            document.querySelector(".answer-input").addEventListener("keypress", function(e) {
                if (e.key === "Enter") {
                    const btn = this.closest(".widget").querySelector(".check-btn");
                    if (btn && !btn.disabled) btn.click();
                }
            });
        });
    </script>
</body>
</html>